/////////////////////////////////////////////////////////////
//풋볼 게임 객체지향 프로그래밍
//작성자 : 최승환
//1 전체적인 게임구조 클래스화
//2 Point클래스를 이용한 오브젝트의 클래스화
//3 스테이지 정보와 게임 옵션 관리하는 변수들을 클래스화
/////////////////////////////////////////////////////////////

#pragma region

#pragma region 헤더파일
#include "Point_Class.h"
#include <stdio.h>
#include <conio.h>
#include <string.h>
#include <windows.h>
#include <time.h>
//#include <fmod.h>
#include <windows.h>

#pragma endregion

#pragma region 타입명 선언 및 전역 변수

//#define MAX_STAGE_ 2

//////

typedef enum _GAME_STATE { INIT, READY, RUNNING, STOP, SUCCESS, FAILED, RESULT } GAME_STATE;

//class EFFECT
//{
//public:
//	clock_t StratTime; // 효과 발생 시각
//	clock_t StayTime;  // 효과 지속 시간	
//};
//
//
//class STAGE_OPTION
//{
//public:
//	char g_strPlayer[11];
//	int g_nLength, g_nGoal, g_nBallCount, g_nGoalBallCount, g_nStage, g_nIsGoal;
//	clock_t g_LimitTime, g_GameStartTime, g_UpdateOldTime;
//
//
//	STAGE_OPTION::STAGE_OPTION()
//	{
//		g_nStage = -1;
//		strcpy(g_strPlayer, "┗━●━┛");
//	}
//};

#pragma region 스테이지 인포 클래스

//class STAGE_INFO_CLASS
//{
//public:
//	int nGoalBall;			// 골인해야 할 볼의 개수 
//	clock_t LimitTime;      // 제한 시간 
//	int nGoalDaeLength;		// 골대 길이 
//	int nGoalDaeX;			// 골대 이동 X 좌표
//	int nGoalDaeY;			// 골대 이동 Y 좌표 
//	clock_t MoveTime;		// 골대 이동 시간 간격
//	int nDist;				// 골대 이동 거리
//
//	static GAME_STATE g_GameState;
//
//	void Set_Info(int GoalBall, clock_t LT, int GoalDaeLength, int GoalDaeX, int GoalDaeY, clock_t MT, int Dist);
//};
//
//GAME_STATE STAGE_INFO_CLASS::g_GameState = INIT;
//
//void STAGE_INFO_CLASS::Set_Info(int GoalBall, clock_t LT, int GoalDaeLength, int GoalDaeX, int GoalDaeY, clock_t MT, int Dist)
//{
//	nGoalBall = GoalBall;
//	LimitTime = LT;
//	nGoalDaeLength = GoalDaeLength;
//	nGoalDaeX = GoalDaeX;
//	nGoalDaeY = GoalDaeY;
//	MoveTime = MT;
//	nDist = Dist;
//}

STAGE_INFO_CLASS g_sStageInfo[MAX_STAGE_];

STAGE_OPTION g_Opt;

#pragma endregion

//FMOD_SYSTEM *g_System;  // FMOD system 변수선언
//FMOD_SOUND  *g_Sound[7];          // 배경 음악                       효과 음악 
//char        *g_strFileName[7] = { "init.wav", "run.wav", "fail.wav", "ready.wav", "success.wav", "shoot.wav", "wow.wav" };
//FMOD_CHANNEL *g_Channel[7];

#pragma endregion

#pragma region 오브젝트 관련 클래스

//class Point
//{
//public:
//	Point()
//	{
//		x = 0;
//		y = 0;
//	}
//	int get_x()
//	{
//		return x;
//	}
//	int get_y()
//	{
//		return y;
//	}
//	void set_x(int ix)
//	{
//		x = ix;
//	}
//	void set_y(int iy)
//	{
//		y = iy;
//	}
//	void set_point(int ix, int iy)
//	{
//		x = ix;
//		y = iy;
//	}
//	void plus_x(int px)
//	{
//		x += px;
//	}
//	void plus_y(int py)
//	{
//		y += py;
//	}
//	void plus_point(int px, int py)
//	{
//		x += px;
//		y += py;
//	}
//
//private:
//	int x, y;
//};

//class PLAYER : public POINT
//{
//public:
//	int nCenterX, nCenterY;
//	//int nMoveX, nMoveY;
//	int nX, nY;
//	friend class FOOTBALL_GAME_CLASS;
//};
//
//class BALL : public POINT
//{
//public:
//	int nIsReady;        // 준비 상태(1), 슛상태(0)
//						 //int nMoveX, nMoveY;  // 이동 좌표
//	clock_t MoveTime;    // 이동 시간 간격
//	clock_t OldTime;     // 이전 이동 시각
//	friend class FOOTBALL_GAME_CLASS;
//};
//
//class GOAL_DAE : public POINT
//{
//public:
//	//int nMoveX, nMoveY;     // 이동 좌표 
//	int nLength;			// 골대 길이	
//	int nLineX[7];			// 골인 라인 x 좌표 (7개)
//	clock_t	MoveTime;		// 이동 시간 간격
//	clock_t	OldTime;	    // 이전 이동 시간
//	int	nDist;				// 이동 거리
//	friend class FOOTBALL_GAME_CLASS;
//};

#pragma endregion

#pragma region Screen 클래스

//class FootBall_Screen
//{
//public:
//	static void ScreenInit();
//	static void ScreenFlipping();
//	static void ScreenClear();
//	static void ScreenRelease();
//	static void ScreenPrint(int x, int y, char *string);
//	static void SetColor(unsigned short color);
//
//	static void InitScreen();
//	static void ReadyScreen();
//	static void BackScreen();
//	static void GoalMessage(int nX, int nY);
//	static void SuccessScreen();
//	static void FailureScreen();
//	static void ResultScreen();
//
//	static void Render(GOAL_DAE g_sGoalDae, BALL g_sBall, PLAYER g_sPlayer);
//
//	static int g_nScreenIndex;
//	static HANDLE g_hScreen[2];
//
//private:
//	friend class Football_Game;
//
//};
//
////스태틱 변수 초기화
//int FootBall_Screen::g_nScreenIndex = 0;
//HANDLE FootBall_Screen::g_hScreen[2] = { NULL,NULL };
//
//#pragma region Screen.c 복붙-> Screen class 정의
//
//void FootBall_Screen::ScreenInit()
//{
//	CONSOLE_CURSOR_INFO cci;
//
//	// 가상의 콘솔창 2개룰 만든다.
//	g_hScreen[0] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
//	g_hScreen[1] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
//
//	// 커서 숨기기
//	cci.dwSize = 1;
//	cci.bVisible = FALSE;
//	SetConsoleCursorInfo(g_hScreen[0], &cci);
//	SetConsoleCursorInfo(g_hScreen[1], &cci);
//}
//
//void FootBall_Screen::ScreenFlipping()
//{
//	Sleep(10);
//	SetConsoleActiveScreenBuffer(g_hScreen[g_nScreenIndex]);
//	g_nScreenIndex = !g_nScreenIndex;
//}
//
//void FootBall_Screen::ScreenClear()
//{
//	COORD Coor = { 0, 0 };
//	DWORD dw;
//	FillConsoleOutputCharacter(g_hScreen[g_nScreenIndex], ' ', 80 * 25, Coor, &dw);
//}
//
//void FootBall_Screen::ScreenRelease()
//{
//	CloseHandle(g_hScreen[0]);
//	CloseHandle(g_hScreen[1]);
//}
//
//
//void FootBall_Screen::ScreenPrint(int x, int y, char *string)
//{
//	DWORD dw;
//	COORD CursorPosition = { x, y };
//	SetConsoleCursorPosition(g_hScreen[g_nScreenIndex], CursorPosition);
//	WriteFile(g_hScreen[g_nScreenIndex], string, strlen(string), &dw, NULL);
//}
//
//// 1 ~ 15 까지 색상 설정 가능
//void FootBall_Screen::SetColor(unsigned short color)
//{
//	SetConsoleTextAttribute(g_hScreen[g_nScreenIndex], color);
//}
//
//#pragma endregion
//
//
//void FootBall_Screen::InitScreen()
//{
//	FootBall_Screen::ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━┓");
//	FootBall_Screen::ScreenPrint(0, 1, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 2, "┃             □━━━□                   ┃");
//	FootBall_Screen::ScreenPrint(0, 3, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 4, "┃                        ///.   슛~~~      ┃");
//	FootBall_Screen::ScreenPrint(0, 5, "┃                       (^.^)              ┃");
//	FootBall_Screen::ScreenPrint(0, 6, "┃                      ┗┫ ┣┓           ┃");
//	FootBall_Screen::ScreenPrint(0, 7, "┃                         ┏┛             ┃");
//	FootBall_Screen::ScreenPrint(0, 8, "┃                     ⊙  ┛＼             ┃");
//	FootBall_Screen::ScreenPrint(0, 9, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 10, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 11, "┃       슛 골인 게임  Go! Go!              ┃");
//	FootBall_Screen::ScreenPrint(0, 12, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 13, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 14, "┃       j :왼쪽 l : 오른쪽 k :슛           ┃");
//	FootBall_Screen::ScreenPrint(0, 15, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 16, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 17, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 18, "┃        ┗●┛  space 키를 눌러주세요     ┃");
//	FootBall_Screen::ScreenPrint(0, 19, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 20, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 21, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 22, "┗━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void FootBall_Screen::ReadyScreen()
//{
//	char string[100];
//
//	FootBall_Screen::ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━┓");
//	FootBall_Screen::ScreenPrint(0, 1, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 2, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 3, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 4, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 5, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 6, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 7, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 8, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 9, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 10, "┃■■■■■                    ■■■■■■┃");
//	sprintf(string, "┃■■■■■     %d   스테이지   ■■■■■■┃", g_Opt.g_nStage + 1);
//	FootBall_Screen::ScreenPrint(0, 11, string);
//	FootBall_Screen::ScreenPrint(0, 12, "┃■■■■■                    ■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 13, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 14, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 15, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 16, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 17, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 18, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 19, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 20, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 21, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 22, "┃■■■■■■■■■■■■■■■■■■■■■┃");
//	FootBall_Screen::ScreenPrint(0, 23, "┗━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void FootBall_Screen::BackScreen()
//{
//	char string[100];
//
//	FootBall_Screen::ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━┓");
//	FootBall_Screen::ScreenPrint(0, 1, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 2, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 3, "┃                                          ┃");
//	sprintf(string, "┃                                          ┃스테이지: %d", g_Opt.g_nStage + 1);
//	FootBall_Screen::ScreenPrint(0, 4, string);
//	FootBall_Screen::ScreenPrint(0, 5, "┃                                          ┃");
//	sprintf(string, "┣━━━━━━━━━━━━━━━━━━━━━┫제한 시간: %d", g_sStageInfo[g_Opt.g_nStage].LimitTime / 1000);
//	FootBall_Screen::ScreenPrint(0, 6, string);
//	FootBall_Screen::ScreenPrint(0, 7, "┃                                          ┃");
//	sprintf(string, "┃                                          ┃현재 시간: %d", (clock() - g_Opt.g_GameStartTime) / 1000);
//	FootBall_Screen::ScreenPrint(0, 8, string);
//	FootBall_Screen::ScreenPrint(0, 9, "┃                                          ┃");
//	sprintf(string, "┃                                          ┃목표 골인: %d ", g_sStageInfo[g_Opt.g_nStage].nGoalBall);
//	FootBall_Screen::ScreenPrint(0, 10, string);
//	FootBall_Screen::ScreenPrint(0, 11, "┃                                          ┃");
//	sprintf(string, "┃                                          ┃골인 공 개수: %d ", g_Opt.g_nBallCount);
//	FootBall_Screen::ScreenPrint(0, 12, string);
//
//	FootBall_Screen::ScreenPrint(0, 13, "┃                                          ┃");
//	sprintf(string, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 14, string);
//	FootBall_Screen::ScreenPrint(0, 15, "┃                                          ┃");
//	sprintf(string, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 16, string);
//	FootBall_Screen::ScreenPrint(0, 17, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 18, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 19, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 20, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 21, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 22, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 23, "┗━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void FootBall_Screen::GoalMessage(int nX, int nY)
//{
//	FootBall_Screen::ScreenPrint(nX, nY, "☆ )) 골인 (( ★");
//	FootBall_Screen::ScreenPrint(nX, nY + 1, "＼(^^')/ ＼(\"*')/");
//	FootBall_Screen::ScreenPrint(nX, nY + 2, "   ■       ■");
//	FootBall_Screen::ScreenPrint(nX, nY + 3, "  ┘┐    ┌└");
//}
//
//void FootBall_Screen::SuccessScreen()
//{
//	FootBall_Screen::ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━┓");
//	FootBall_Screen::ScreenPrint(0, 1, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 2, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 3, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 4, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 5, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 6, "┃                ////＼＼                  ┃");
//	FootBall_Screen::ScreenPrint(0, 7, "┃               q ∧  ∧ p                 ┃");
//	FootBall_Screen::ScreenPrint(0, 8, "┃               (└──┘)                 ┃");
//	FootBall_Screen::ScreenPrint(0, 9, "┃             ♬ 미션 성공 ♪              ┃");
//	FootBall_Screen::ScreenPrint(0, 10, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 11, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 12, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 13, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 14, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 15, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 16, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 17, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 18, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 19, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 20, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 21, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 22, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 23, "┗━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void FootBall_Screen::FailureScreen()
//{
//	FootBall_Screen::ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━┓");
//	FootBall_Screen::ScreenPrint(0, 1, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 2, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 3, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 4, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 5, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 6, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 7, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 8, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 9, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 10, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 11, "┃                    미션 실패 !!!!        ┃");
//	FootBall_Screen::ScreenPrint(0, 12, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 13, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 14, "┃                 ●┳━┓                 ┃");
//	FootBall_Screen::ScreenPrint(0, 15, "┃                   ┛  ┗                 ┃");
//	FootBall_Screen::ScreenPrint(0, 16, "┃                  ■■■■                ┃");
//	FootBall_Screen::ScreenPrint(0, 17, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 18, "┃        다시 하시겠습니까? (y/n)          ┃");
//	FootBall_Screen::ScreenPrint(0, 19, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 20, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 21, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 22, "┗━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void FootBall_Screen::ResultScreen()
//{
//	char string[100];
//	FootBall_Screen::ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━┓");
//	FootBall_Screen::ScreenPrint(0, 1, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 2, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 3, "┃             □━━━□                   ┃");
//	FootBall_Screen::ScreenPrint(0, 4, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 5, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 6, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 7, "┃                                          ┃");
//	sprintf(string, "┃      성공한 스테이지 :  %2d               ┃", g_Opt.g_nStage + 1);
//	FootBall_Screen::ScreenPrint(0, 8, string);
//	FootBall_Screen::ScreenPrint(0, 9, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 10, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 11, "┃   ___▒▒▒___                           ┃");
//	FootBall_Screen::ScreenPrint(0, 12, "┃     (*^  ^*)                             ┃");
//	FootBall_Screen::ScreenPrint(0, 13, "┃ =====○==○=====                         ┃");
//	FootBall_Screen::ScreenPrint(0, 14, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 15, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 16, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 17, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 18, "┃                      ┗●┛              ┃");
//	FootBall_Screen::ScreenPrint(0, 19, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 20, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 21, "┃                                          ┃");
//	FootBall_Screen::ScreenPrint(0, 22, "┗━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//
//void FootBall_Screen::Render(GOAL_DAE g_sGoalDae, BALL g_sBall, PLAYER g_sPlayer)
//{
//	char string[100] = { 0, };
//	int nLength, i;
//
//	FootBall_Screen::ScreenClear();
//
//	switch (g_sStageInfo->g_GameState)
//	{
//	case INIT:
//		if (g_Opt.g_nStage == 0)
//			InitScreen();
//		break;
//	case READY:
//		ReadyScreen();
//		break;
//	case RUNNING:
//		BackScreen();
//		FootBall_Screen::ScreenPrint(g_sGoalDae.get_x(), g_sGoalDae.get_y(), "□");
//		nLength = g_sGoalDae.nLength * 2 + 1;
//
//		for (i = 0; i < nLength; i++)
//			FootBall_Screen::ScreenPrint(g_sGoalDae.nLineX[i], g_sGoalDae.get_y(), "━");
//
//		FootBall_Screen::ScreenPrint(g_sGoalDae.nLineX[nLength - 1] + 2, g_sGoalDae.get_y(), "□");
//
//		// Note: 효과 출력  	
//		if (g_Opt.g_nIsGoal == 1)
//		{
//			GoalMessage(10, 10);
//		}
//
//		// Note: 2 컬럼씩 클리핑 
//		if (g_sPlayer.nX < 2)  //  왼쪽 클리핑 처리
//			FootBall_Screen::ScreenPrint(2, g_sPlayer.get_y(), &g_Opt.g_strPlayer[(g_sPlayer.nX - 2)*-1]);	 // 좌표를 배열 인덱스 
//		else if (g_sPlayer.get_x() + (g_Opt.g_nLength - g_sPlayer.nCenterX + 1) > 43) // 오른쪽 클리핑 처리
//		{
//			strncat(string, g_Opt.g_strPlayer, g_Opt.g_nLength - ((g_sPlayer.get_x() + g_sPlayer.nCenterX + 1) - 43));
//			FootBall_Screen::ScreenPrint(g_sPlayer.nX, g_sPlayer.get_y(), string);
//		}
//		else { // 1 컬럼씩 이동
//			FootBall_Screen::ScreenPrint(g_sPlayer.nX, g_sPlayer.get_y(), g_Opt.g_strPlayer);
//		}
//
//		FootBall_Screen::ScreenPrint(g_sBall.get_x(), g_sBall.get_y(), "⊙");
//		break;
//	case SUCCESS:
//		SuccessScreen();
//		break;
//	case FAILED:
//		FailureScreen();
//		break;
//	case RESULT:
//		ResultScreen();
//		break;
//	}
//
//	// Note: 렌더링 끝 
//	FootBall_Screen::ScreenFlipping();
//}


#pragma endregion

#pragma region Football_Game 클래스 

class Football_Game
{
public:
	// 함수
	Football_Game();
	virtual void play();
	void Init();
	void Release();
	void Update();


private:
	friend class FootBall_Screen;
	//변수

	FootBall_Screen Scr;
	EFFECT g_sEffect;

	GOAL_DAE g_sGoalDae;
	BALL g_sBall;
	PLAYER g_sPlayer;

	int nKey, nRemain;

};

Football_Game::Football_Game()
{
	g_sStageInfo[0].Set_Info(3, 1000 * 20, 1, 20, 3, 300, 1);
	g_sStageInfo[1].Set_Info(10, 1000 * 30, 2, 20, 5, 300, 1);

}

void Football_Game::play()
{


	Scr.ScreenInit();
	Football_Game::Init();        // 초기화

	while (1)
	{
		//if (_kbhit())
		//{
		//	if (g_sStageInfo->g_GameState == RESULT)
		//		break;

		//	nKey = _getch();

		//	switch (nKey)
		//	{
		//	case 'j':
		//		if (g_sPlayer.get_x() > 2) // 왼쪽 충돌 경계 좌표 체크
		//		{
		//			g_sPlayer.plus_x(-1);
		//			nRemain = g_Opt.g_nLength - g_sPlayer.nCenterX + 1; // 전체 길이 - ( 중심 좌표 + 1 )은 남은 길이
		//																// Note: 2컬럼씩 이동하기 위한 부분 ( 팔이 걸친 경우 ) 
		//			if (g_sPlayer.get_x() - g_sPlayer.nCenterX < 2 || g_sPlayer.get_x() + nRemain > 43)
		//				g_sPlayer.plus_x(-1);

		//			g_sPlayer.nX = g_sPlayer.get_x() - g_sPlayer.nCenterX;
		//		}
		//		break;
		//	case 'l':
		//		if (g_sPlayer.get_x() + 1 < 43) // 오른쪽 충돌 경계 좌표 체크
		//		{
		//			g_sPlayer.plus_x(1);
		//			nRemain = g_Opt.g_nLength - g_sPlayer.nCenterX + 1; // 전체 길이 - ( 중심 좌표 + 1 )은 남은 길이
		//																// Note: 2컬럼씩 이동하기 위한 부분 ( 팔이 걸친 경우 )
		//			if (g_sPlayer.get_x() + nRemain > 43 || (g_sPlayer.get_x() - g_sPlayer.nCenterX < 2))
		//				g_sPlayer.plus_x(1);

		//			g_sPlayer.nX = g_sPlayer.get_x() - g_sPlayer.nCenterX;
		//		}
		//		break;
		//	case 'k':
		//		if (g_sBall.nIsReady && g_sStageInfo->g_GameState == RUNNING)
		//		{
		//			g_sBall.set_x(g_sPlayer.get_x());
		//			g_sBall.set_y(g_sPlayer.get_y() - 1);
		//			g_sBall.OldTime = clock();
		//			g_sBall.nIsReady = 0;
		//			//FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_Sound[5], 0, &g_Channel[5]); // 슛 동작 소리 출력
		//		}
		//		break;

		//	case 'y':
		//	case 'Y':
		//		if (g_sStageInfo->g_GameState == FAILED)
		//		{
		//			Init();
		//			g_sStageInfo->g_GameState = READY;
		//			//FMOD_Channel_Stop( g_Channel[2] );  // 미션 실패 사운드 출력 중지 
		//			//FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_Sound[3], 0, &g_Channel[3]);
		//		}
		//		break;
		//	case 'n':
		//	case 'N':
		//		if (g_sStageInfo->g_GameState == FAILED)
		//		{
		//			g_sStageInfo->g_GameState = RESULT;
		//			//FMOD_Channel_Stop( g_Channel[2] );  // 미션 실패 사운드 출력 중지							
		//		}
		//		break;

		//	case ' ':
		//		if (g_sStageInfo->g_GameState == INIT && g_Opt.g_nStage == 0)
		//		{
		//			g_sStageInfo->g_GameState = READY;
		//			//FMOD_Channel_Stop( g_Channel[0] ); // 배경음 중지
		//			//FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_Sound[3], 0, &g_Channel[3]); // ready 사운드
		//			g_Opt.g_UpdateOldTime = clock();  // ready를 일정시간 지속해 주기 위해 							
		//		}
		//		break;
		//	}
		//}


		Football_Game::Update();// 데이터 갱신
		Scr.Render(g_sGoalDae, g_sBall, g_sPlayer);    // 화면 출력
													   //FMOD_System_Update( g_System );		
	}

	Football_Game::Release();   // 해제
	FootBall_Screen::ScreenRelease();
}


void Football_Game::Init()
{
	int nLength, i;

	if (g_Opt.g_nStage == -1)
	{
		//SoundInit(); // 사운드 초기화
		g_Opt.g_nStage = 0;
		//FMOD_CHANNEL_FREE( g_System, FMOD_CHANNEL_FREE, g_Sound[0], 0, &g_Channel[0]); // 소개 사운드는 전체에서 한번만 실행한다.
	}

	g_Opt.g_LimitTime = g_sStageInfo[g_Opt.g_nStage].LimitTime;  // 제한 시간 설정
	g_Opt.g_nGoalBallCount = g_sStageInfo[g_Opt.g_nStage].nGoalBall; // 목표 골인 개수

	g_sPlayer.nCenterX = 4;
	g_sPlayer.nCenterY = 0;
	g_sPlayer.set_x(20);
	g_sPlayer.set_y(22);
	g_sPlayer.nX = g_sPlayer.get_x() - g_sPlayer.nCenterX;
	g_Opt.g_nLength = strlen(g_Opt.g_strPlayer);

	// 공의 초기화
	g_sBall.nIsReady = 1;
	g_sBall.set_x(g_sPlayer.get_x());
	g_sBall.set_y(g_sPlayer.get_y() - 1);
	g_sBall.MoveTime = 100;

	// 골대 초기화

	g_sGoalDae.set_x(g_sStageInfo[g_Opt.g_nStage].nGoalDaeX);
	g_sGoalDae.set_y(g_sStageInfo[g_Opt.g_nStage].nGoalDaeY);
	g_sGoalDae.nLength = g_sStageInfo[g_Opt.g_nStage].nGoalDaeLength;
	g_sGoalDae.MoveTime = g_sStageInfo[g_Opt.g_nStage].MoveTime;
	g_sGoalDae.OldTime = clock();
	g_sGoalDae.nDist = g_sStageInfo[g_Opt.g_nStage].nDist;
	nLength = g_sGoalDae.nLength * 2 + 1; // Note: 배열의 최대 길이

	for (i = 0; i < nLength; i++)
	{
		g_sGoalDae.nLineX[i] = g_sGoalDae.get_x() + 2 * (i + 1);
	}

	// 효과 
	g_sEffect.StayTime = 2000; // 2초 설정
	g_Opt.g_nGoal = 0;      // 스테이지 완료 변수
	g_Opt.g_UpdateOldTime = clock();
	g_Opt.g_nBallCount = 0;  // 골인한 공의 개수
}

void Football_Game::Release()
{
	//+int i;
	/*for( i = 0 ; i < 7 ; i++ )
	FMOD_Sound_Release( g_Sound[i] );

	FMOD_System_Close( g_System );
	FMOD_System_Release( g_System ); */
}

void Football_Game::Update()
{
	clock_t CurTime = clock();
	int nLength = g_sGoalDae.nLength * 2 + 1; // Note: 배열의 최대 길이
	int i;


	switch (g_sStageInfo->g_GameState)
	{
	case READY:
		if (CurTime - g_Opt.g_UpdateOldTime > 2000)  // 2초
		{
			g_sStageInfo->g_GameState = RUNNING;
			g_Opt.g_GameStartTime = CurTime;

			//FMOD_Channel_Stop( g_Channel[3] );  // ready 사운드 중지
			//FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_Sound[1], 0, &g_Channel[1]); // running 배경음
		}
		break;
	case RUNNING:
		if (CurTime - g_Opt.g_GameStartTime > g_Opt.g_LimitTime) // Note: 제한 시간
		{
			g_sStageInfo->g_GameState = STOP;
			return;
		}
		else {
			// Note: 골대
			if (CurTime - g_sGoalDae.OldTime > g_sGoalDae.MoveTime)
			{
				g_sGoalDae.OldTime = CurTime;
				if (g_sGoalDae.get_x() + g_sGoalDae.nDist >= 2 && ((g_sGoalDae.nLineX[nLength - 1] + 3) + g_sGoalDae.nDist) <= 43)
				{
					g_sGoalDae.plus_x(g_sGoalDae.nDist);
					for (i = 0; i < nLength; i++)
					{
						g_sGoalDae.nLineX[i] = g_sGoalDae.get_x() + 2 * (i + 1);
					}
				}
				else {
					g_sGoalDae.nDist = g_sGoalDae.nDist * -1; // -1 이 방향을 바꾸어 줌.
				}
			}

			if (g_sBall.nIsReady == 0) // 이동 중일 때 
			{	// 이동 시간 간격에 의한 이동
				if ((CurTime - g_sBall.OldTime) > g_sBall.MoveTime)
				{
					if (g_sBall.get_y() - 1 > 0)
					{
						g_sBall.plus_y(-1);
						g_sBall.OldTime = CurTime; // 다음 이동 시각과 비교하기 위해 현재 시간을 이전 시간 변수에 저장

												   // 골대 라인 충돌
						if (g_sBall.get_x() >= g_sGoalDae.nLineX[0] && g_sBall.get_x() + 1 <= g_sGoalDae.nLineX[nLength - 1] + 1)
						{
							if (g_sBall.get_y() <= g_sGoalDae.get_y())
							{   // 공 초기화
								g_sBall.nIsReady = 1;
								g_sBall.set_x(g_sPlayer.get_x());
								g_sBall.set_y(g_sPlayer.get_y() - 1);
								g_Opt.g_nBallCount++;  // 골인한 공의 개수										

								if (g_Opt.g_nBallCount == g_Opt.g_nGoalBallCount) // 공과 목표 공과의 개수가 같으면 SUCCESS
								{
									g_sStageInfo->g_GameState = STOP;
									g_Opt.g_nGoal = 1;
									return;
								}

								// 효과 출력
								if (g_Opt.g_nIsGoal == 0)
								{
									g_Opt.g_nIsGoal = 1;
									g_sEffect.StratTime = CurTime;
								}

								// 골인 사운드 출력
								//FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_Sound[6], 0, &g_Channel[6]); // 골인 사운드 와우~
							}
							// 골대 충돌 
						}
						else if ((g_sBall.get_x() >= g_sGoalDae.nLineX[0] - 2 && g_sBall.get_x() <= g_sGoalDae.nLineX[0] - 1) ||
							(g_sBall.get_x() + 1 >= g_sGoalDae.nLineX[0] - 2 && g_sBall.get_x() + 1 <= g_sGoalDae.nLineX[0] - 1) ||
							(g_sBall.get_x() >= g_sGoalDae.nLineX[nLength - 1] + 2 && g_sBall.get_x() <= g_sGoalDae.nLineX[nLength - 1] + 3) ||
							(g_sBall.get_x() + 1 >= g_sGoalDae.nLineX[nLength - 1] + 2 && g_sBall.get_x() + 1 <= g_sGoalDae.nLineX[nLength - 1] + 3))
						{
							if (g_sBall.get_y() <= g_sGoalDae.get_y())
							{   // 공 초기화
								g_sBall.nIsReady = 1;
								g_sBall.set_x(g_sPlayer.get_x());
								g_sBall.set_y(g_sPlayer.get_y() - 1);
							}
						}
					}
					else { // 공 초기화
						g_sBall.nIsReady = 1;
						g_sBall.set_x(g_sPlayer.get_x());
						g_sBall.set_y(g_sPlayer.get_y() - 1);
					}
				}
			}
			else {
				g_sBall.set_x(g_sPlayer.get_x());
			}

			// 효과 
			if (g_Opt.g_nIsGoal == 1)
			{
				if (CurTime - g_sEffect.StratTime > g_sEffect.StayTime)
					g_Opt.g_nIsGoal = 0;
			}
		}
		break;
	case STOP:
		if (g_Opt.g_nGoal == 1)
		{
			g_sStageInfo->g_GameState = SUCCESS;
			g_Opt.g_UpdateOldTime = CurTime;
			//FMOD_Channel_Stop( g_Channel[1] );  // running 사운드 중지
			//FMOD_Channel_Stop( g_Channel[1] );  // running 사운드 중지

			//FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_Sound[4], 0, &g_Channel[4]); // 미션 성공 사운드
		}
		else {
			g_sStageInfo->g_GameState = FAILED;
			//FMOD_Channel_Stop( g_Channel[1] );  // running 사운드 중지
			//FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_Sound[2], 0, &g_Channel[2]); // 미션 실패 사운드
		}
		break;
	case SUCCESS:
		if (CurTime - g_Opt.g_UpdateOldTime > 3000)
		{
			g_Opt.g_UpdateOldTime = CurTime;
			++g_Opt.g_nStage;
			Init();
			g_sStageInfo->g_GameState = READY;
			//FMOD_Channel_Stop( g_Channel[4] );  // 미션 성공 사운드 출력 중지					
			//FMOD_System_PlaySound( g_System, FMOD_CHANNEL_FREE, g_Sound[3], 0, &g_Channel[3]); //READY 사운드 
		}
		break;
	}
}

#pragma endregion

#pragma region 메인함수

//int main(void)
//{
//	Football_Game Game1;
//	Game1.play();
//
//	return 0;
//}


#pragma endregion

#pragma endregion